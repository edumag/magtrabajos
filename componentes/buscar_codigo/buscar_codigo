#!/bin/bash

## @file buscar_codigo
##
## @brief Buscar palabras seleccionadas en el código
##
## Podemos enviar la lista a vim como si se tratara de una lista de errores para hacer
## su seguimiento
##
## Uso: buscar_codigo [opciones] [archivos o directorios seleccionados]
## 
## Opciones:
## <pre>
## buscar [palabra a buscar]   Palabra a buscar dentro del código
## formato [formato]           Por defecto txt una lista de las lineas encontradas 
##                             que podremos incluir en vim, otros posibles: rst, enlaces.
## menu                        Presentar menú
## encoding_entrada [encoding] Especificar encoding de archivos de entrada, por defecto
##                             utf-8
## encoding_salida [encoding]  Encoding de salida, por defecto utf-8
## servidor_vim [servername]   Nombre del servidor vim al que enviar la lista con el resultado
## debug                       Muestra mensajes de programa
## help                        Pantalla de ayuda
## </pre>
##
## En caso de no seleccionar ninguna ubicación se entenderá que se quiere buscar en el directorio
## actual.
## 
## Para modificar el encoding se utiliza iconv, con iconv -l tendremos una lista de posibles
## encodings
##
## @author   Eduardo Magrané
## @internal
##       web  http://www.mamedu.com
##
##      mail  eduardo.mamedu.com
##
##   Created  13/03/11
##
##  Revision  SVN $Id: $
##
## Copyright  Copyright (c) 2011, Eduardo Magrané
## 
## This source code is released for free distribution under the terms of the
## GNU General Public License as published by the Free Software Foundation.

## Recoger configuración de magtrabajos
source "`dirname "$BASH_SOURCE"`/../../config"

programa=$(basename "$0")                 ##< Nombre del programa

## Si definimos un proyecto se recogerá la configuración del mismo
proyecto=''

## comando según configuración
comando=''

## carpeta destino
## Podemos seleccionar una carpeta donde buscar para limitar la busqueda

carpeta_busqueda=""

## @defgroup configuracion Configuración 
## @{
##
## @defgroup configuracion_buscar_codigo Configuración para buscar_codigo 
## @{

## @var buscar_codigo_formato_enlaces
## Formato de enlace para formato enlaces, nos permite editar el archivo desde el listado
## del navegador con magtrabajos --editar 

buscar_codigo_formato_enlaces="${buscar_codigo_formato_enlaces:-vim://%s@%s}"

## @var buscar_codigo_paginador
## Paginador: less, more... 

buscar_codigo_paginador="${buscar_codigo_paginador:-less}"

## @var buscar_codigo_exclude_dir
## Directorios a excluir en la búsqueda separados con espacios

buscar_codigo_exclude_dir=".svn cache docs ext .git"

## @var buscar_codigo_exclude
## Excluir archivos en la búsqueda separados con espacios y entre comillas simple

buscar_codigo_exclude="'*.swp' 'tags' 'cscope.out'"

## @}
## @}

## Si tenemos configuración de usuario la recogemos
[[ -e "$HOME/.magtrabajos/configuracion/$programa" ]] && source "$HOME/.magtrabajos/configuracion/$programa"

## definimos la configuración según proyecto

definir_configuracion() {

   # Sino hemos definido un proyecto probamos si la carpeta actual está 
   # definido como proyecto para automatizar la recogida de la configuración
   # del mismo.

   if [ -z "$proyecto" ] ; then
      proyecto="`basename $(pwd)`"
   fi

   ## Si tenemos configuración de proyecto la recogemos
   [[ -e "$HOME/.magtrabajos/proyectos/$proyecto/configuracion/$programa" ]] && source "$HOME/.magtrabajos/proyectos/$proyecto/configuracion/$programa"

   ## Comando de busqueda

   comando='egrep -nHR '

   for exclude_dir in $buscar_codigo_exclude_dir ; do
      comando="$comando --exclude-dir='$exclude_dir' "
   done

   for exclude in $buscar_codigo_exclude; do
      comando="$comando --exclude=$exclude "
   done

   if [ "$carpeta_busqueda" != "" ] ; then
      comando="$comando  \"$buscar\" ${carpeta_busqueda}"
   else
      comando="$comando  \"$buscar\" ${archivos_afectados:-./}"
   fi

   # guardamos salida a fichero temporal
   comando="$comando > $resultado"
   }


buscar='@todo|@bug'                       ##< Palabra a buscar, por defecto tareas y errores
archivos_afectados=""                     ##< Selección en la que buscar
formato=txt                               ##< Tipo de salida, puede ser rst o vim
encoding_entrada='utf-8'                  ##< Encoding de archivos del código
encoding_salida='utf-8'                   ##< Encoding de salida, por defecto utf-8
servidor_vim='GVIM'                       ##< Servidor de vim al que enviar la lista

resultado="${DIR_TMP}resultado_buscar_codigo"  ##< Fichero de salida, diferenciamos entre distintas búsquedas
debug=false                               ##< Debug true/false 

[[ -e "$resultado" ]] && rm "$resultado"

## Ejecutar comando

ejecutar_comando(){

   [[ -z "$1" ]] && mostrar=0 || mostrar=1

   definir_configuracion

   # ejecutarComando "$comando" $mostrar
   eval "$comando"

   }

## Ejecutar el escaneo de código

function escanear_codigo() {

   local salida=$resultado

   if [ "$debug" = "true" ] ; then
      echo proyecto: $proyecto
      echo comando: $comando
      echo buscar_codigo_formato_enlaces: $buscar_codigo_formato_enlaces
      echo buscar_codigo_paginador: $buscar_codigo_paginador
      echo buscar_codigo_exclude_dir: $buscar_codigo_exclude_dir
      echo buscar_codigo_exclude: $buscar_codigo_exclude
      echo buscar: $buscar
      echo archivos_afectados: $archivos_afectados
      echo formato: $formato
      echo encoding_entrada: $encoding_entrada
      echo encoding_salida: $encoding_salida
      echo servidor_vim: $servidor_vim

   fi

   [[ "$debug" = "true" ]] && echo "Escanear: [$buscar] en ${archivos_afectados:-`pwd`}"

   case "$formato" in

      rst)
         ejecutar_comando "$comando" | sed 's/^\.\///' | egrep '(//|#)' | sed 's/\*//g' | \
            awk -v buscar="$buscar" -v FS=: '{printf "\n%s%s%s%s%s", $1, buscar, $2, buscar,  $3}' | \
            awk -v FS="$buscar" 'BEGIN { fich_anterior = "" }  \
              { fich_actual=$1 ; 
                 if ( fich_actual != "" ) {
                     if ( fich_actual != fich_anterior ) {
                        linea=fich_actual;gsub(".","-",linea);
                        printf "\n\n%s\n%s\n", fich_actual,linea;
                        fich_anterior = fich_actual;
                     }
                     printf "\n* %s : %s ", $3, $6;
                  }
               }' \
            > "${salida}"

         ;;

      enlaces)
         ejecutar_comando "$comando" 
         cat $salida \
            | sed 's/^\.\///' \
            | sed "s/$buscar//g" \
            | sed "s/\/\*\*//g" \
            | sed "s/\*\///g" \
            | sed "s/\*//g" \
            | awk -v FS=':' "{ printf \"- \`%s:%s %s <${buscar_codigo_formato_enlaces}>\`_\n\",\$1,\$2,\$3,\$1,\$2 }" \
            > "${salida}"
         ;;
      *)
         ejecutar_comando "$comando"  \
            | sed 's/^\.\///' \
            > "${salida}"

         ;;

   esac

   # Si no coinciden el encoding de entrada con el de salida
   # transformamos salida

   if [ "$encoding_entrada" != "$encoding_salida" ] ; then

      [[ "$debug" = "true" ]] && echo "Modificamos salida a $encoding_salida"
      iconv -f $encoding_entrada -t $encoding_salida "$salida" > "$salida"-2
      mv "$salida"-2 "$salida"

   fi

   cat "$salida"
   [[ -e "${salida}_2" ]] && rm "${salida}_2"

   }

## Manejamos los parámetros de entrada y el menú

function _buscar_codigo() {

   while [ "$1" != "" ] ; do

      case "$1" in

         proyecto) proyecto="$2" ; shift 2 ;;

         formato) formato="$2" ; shift 2 ;;

         servidor_vim) servidor_vim="$2" ; shift 2 ;;

         debug) debug=true ; shift 1 ;;

         buscar)
            buscar="$2"
            shift 2
            ;;

         encoding_entrada)
            encoding_entrada="$2"
            shift 2
            ;;

         encoding_salida)
            encoding_salida="$2"
            shift 2
            ;;

         enviar_vim)
            shift 1

            # Si el formato no es txt hay que volver a generarlo antes de enviarlo a vim

            #if [ "$formato" != "txt" ] ; then
            #   formato=txt
            #   escanear_codigo
            #fi
            if [ "`vim --serverlist | grep -i $servidor_vim`" != "" ] ; then
               cmd="gvim --servername $servidor_vim --remote-send '<C-\><C-N>:set errorformat=%f:%l:%m<CR>:cfile $resultado<CR>:copen<CR>'"
            else
               local -a servidores_vim=(`vim --serverlist`)
               echo ${servidores_vim[0]}
               if [ ${#servidores_vim[*]} -gt 1 ] ; then
                  echo
                  echo 'Hay más de un servidor de vim disponible, selecciona uno'
                  echo
                  for x in `seq 0 $((${#servidores_vim[*]}-1))` ; do
                     echo "$x) ${servidores_vim[$x]}"
                  done
                  echo
                  read -p 'Opcion: ' OPCION
                  [[ "$OPCION" = "" ]] && return
                  servername=${servidores_vim[$OPCION]}
               else
                  servername=${servidores_vim[*]}
                  if [ "$servername" == "" ] ; then
                     servername=$servidor_vim
                     gvim --servername $servername
                  fi
               fi
               cmd="gvim --servername $servername --remote-send '<C-\><C-N>:set errorformat=%f:%l:%m<CR>:cfile $resultado<CR>:copen<CR>'"
            fi
            ejecutarComando "$cmd"
            ;;

         paginar)
            $buscar_codigo_paginador "$resultado"
            shift 1
            ;;

         help|-h|--help|-help)
            echo
            local mostrar=false
            while read linea ; do 
               if [ "$(echo $linea | grep '@author')" != "" ] ; then
                  return
               fi
               if [ "$mostrar" = "true" ] ; then
                  if [ "$(echo $linea | grep 'pre>')" != "" ] ; then
                     echo
                  else
                     echo -e "$linea" | sed 's/##//'
                  fi
               else
                  if [ "$(echo $linea | grep '@file')" != "" ] ; then
                     mostrar=true
                  fi
               fi
            done < $BASH_SOURCE
            echo
            exit
            ;;
         menu)
            shift 1
            clear
            definir_configuracion 
            caja 'Buscar código'
            if [ "$archivos_afectados" != "" ] ; then
               echo Selección:
               echo
               for a in $archivos_afectados ; do
                  echo "- $a"
               done
               echo
            fi

            abre_caja
            [[ -z "$proyecto" ]] || linea_caja "proyecto: $proyecto"
            linea_caja "Palabra a buscar:       $buscar"
            [[ "$carpeta_busqueda" != "" ]] && linea_caja "Carpeta a buscar:       $carpeta_busqueda"
            # [[ "$encoding_entrada" != "$encoding_salida" ]] && echo "Encoding para salida:   $encoding_salida"
            [[ "$debug" = "true" ]] && linea_caja "Resultado:              $resultado"
            linea_caja "Formato:                $formato"
            linea_caja "Dir actual: `pwd`"
            linea_caja "Directorios a excluir: `for exclude_dir in $buscar_codigo_exclude_dir ; do echo "$exclude_dir " ; done`"
            linea_caja "Archivos a excluir: `for exclude_dir in $buscar_codigo_exclude ; do echo "$exclude_dir " ; done`"
            cierra_caja
            abre_caja
            linea_caja ' [C]ambiar palabra a buscar'
            if [ -e "$resultado" ] ; then
               linea_caja ' [V]er resultado'
               linea_caja ' [E]nviar a vim'
               [[ -z "$proyecto" ]] || linea_caja "[A]ñadir a magtrabajos"
            fi
            linea_caja ' [B]uscar'
            [[ "$archivos_afectados" ]] && linea_caja ' B[u]scar solo en selección'
            linea_caja ' [S]eleccionar carpeta donde buscar'
            cierra_caja
            if [ -e "$resultado" ] ; then
               abre_caja
               linea_caja " Resultados: `wc -l $resultado` `cat $resultado | cut -d: -f1 | uniq | wc -l` archivos"
               cierra_caja
            fi

            read -p 'Opción: ' OPCION

            case "$OPCION" in

               a) magtrabajos -a `cat $resultado | cut -d: -f1 | uniq ` ;;
               c) echo -e "\n" ; read -p "Nueva palabra: " buscar ; _buscar_codigo menu ;;
               v) _buscar_codigo paginar ; _buscar_codigo menu  ;;
               e) _buscar_codigo enviar_vim ; _buscar_codigo menu  ;;
               u) escanear_codigo ; _buscar_codigo menu  ;;
               b) 
                  echo "Comando: "
                  echo
                  echo "$comando"
                  echo
                  echo escaneando código...
                  echo
                  local seleccion_anterior=$archivos_afectados
                  archivos_afectados=''
                  escanear_codigo
                  archivos_afectados=$seleccion_anterior
                  _buscar_codigo menu  
                  ;;
               s) seleccionar_carpeta
                  _buscar_codigo menu  
                  ;;
               *) exit ;;
            esac
            ;;

         *) 
            # sino hemos detectado la palabra a buscar damos por echo que es el primer 
            # parámetro que nos llega.

            [[ "$*" == "" ]] && exit ;

            if [ -z "$buscar" ] ; then
               buscar="$1"
               shift 1
            fi

            archivos_afectados="$*"

            local archivos_afectados2=''
            # Comprobar que los archivos existen sino los sacamos para que la aplicación no pare
            for file in $archivos_afectados ; do
               [[ -e "$file" ]] && archivos_afectados2="$archivos_afectados2 $file" || echo - $file no existe >&2 
               #[[ -e "$file" ]] && archivos_afectados2="$archivos_afectados2 $file"
            done
            archivos_afectados="$archivos_afectados2"
            shift $#
            [[ "$debug" = "true" ]] && echo "Archivos afectados: $archivos_afectados"
            ;;

      esac

   done

   }

## Seleccionar carpeta donde buscar

function seleccionar_carpeta() {

   read -p 'Nombre de carpeta: ' carpeta_busqueda
   [[ "$carpeta_busqueda" == "" ]] && return ;

   }

if [ "$1" = "" ] ; then
   _buscar_codigo menu
else
   _buscar_codigo "$@"
fi
