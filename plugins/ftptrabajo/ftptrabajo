#!/bin/bash 

## @file ftptrabajo
##
## @brief Programa de ftp para trabajar en grupo.
## 
## Características del programa
##
## Con este programa podemos trabajar en grupo, cada vez que trabajamos sobre un archivo crea una marca en el
## servidor para que no pueda ser escrito ese archivo hasta que el programador acabe su trabajo y vuelva a subir
## la nueva versión.
## 
## Es compatible con el sistema de bloqueos que utiliza dreamweaver.
## 
## dependencias: cut ftp lftp diff
## 
## uso de $prog [opción] [fichero]:
## 
## Parámetros:
##
## <pre>
##  --proyecto | -p [proyecto]              Proyecto seleccionado
##  --configurar                            Configurar proyecto de la carpeta actual
##  --comando | -c [comando]                Lanzar comando 
##  -a                                      Añadir archivo a la lista de bloqueados, pendientes de subir.
##  --subir, -s                             Sube un archivo al servidor quitando el bloqueo que
##                                          hayamos puesto anteriormente.
##  --bajar, -b                             Baja un archivo y coloca el bloqueo en el servidor.
##  --listar                                Lista contenido de directorio especificado.
##  --subir-bloqueados, -sb                 Sube de una tacada todos los archivos que hemos ido acumulando y
##                                          tenemos bloqueados en el servidor.
##  --sincronizar                           Bajamos los archivos del servidor que hayan cambiado
##  --sincronizar-servidor                  Subimos los archivos de local que hayan cambiado al servidor
##  --borrar [archivo]                      Borrar archivo del servidor.
##  --cambiar-nombre [origen] [destino]     Cambiar nombre de archivo.
##  --nuevo [archivo o directorio]          Subir archivo o directorio de local a remoto, solo funciona en el caso 
##                                          de que no exista en remoto.
##  --log-ftp                               Terminal con el registro de ftp.
##  --log                                   Terminal con registro del programa.
##  --ver-bloqueados, -vb                   Imprime lista de los archivos que tenemos bloqueados.
##  --total-bloqueados, -tb                 Imprime total de los archivos que tenemos bloqueados.
## 
##  --forzar-bajar, -fb                     Obtener archivo del servidor.
##  --forzar-subir, -fs                     Sube un archivo sin tener en cuenta los bloqueos
## 
##  -elb                                    Editar lista bloqueados
##  -edd                                    Editar lista de directorios descartados en la sincronización.
## 
##  --bajar-bloqueos                        Actualizar archivos bloqueados de servidor con local.
##  --ver-bloqueados                        Ver los archivos bloqueados
##  --ver-bloqueos-local                    Ver los archivos de bloqueo en local
##
##  --lista-externa                         Recibimos archivo que contiene lista de archivos 
## 
##  --menu                                  Menú de aplicación.
## 
##  --depurar                                 Mostramos mensajes de depuración
##  --help, -h                              Imprime esta ayuda.
##  -info                                   Información extendida.
##
## </pre>
##
## Dependencias: cut, ftp, lftp, diff
##
## @author   Eduardo Magrané
##
## @todo Con sftp no borra los ficheros de bloqueo ya que no entiende delete y ftp no entiende rm
##
## @internal
##
##       web  http://www.mamedu.com
##
##      mail  eduardo.mamedu.com
##
##  Revision  SVN $Id: $
##
## Copyright  Copyright (c) 2011, Eduardo Magrané
## 
## This source code is released for free distribution under the terms of the
## GNU General Public License as published by the Free Software Foundation.

# Recoger configuración de magtrabajos
source `dirname "$BASH_SOURCE"`/../../config

# Configuración por defecto de ftptrabajo 
configuracion_leer "${DIR_CONF_USUARIO}configuracion/ftptrabajo" "`dirname "$BASH_SOURCE"`/config.default" 'ftptrabajo' 

# Si no tenemos consola volvemos a lanzarlo desde una.
[[ `tty` ]] || ( ( exec ${TERM:-xterm} -e "$0 $* ; read" & ) ;  exit )

# Variables globales

prog=`basename $0`

## Activación de depuración (Cualquier valor la activa)
DEV=${DEV:-}

## Bloqueo
BLOQUEO_PROPIO=''
## Proyecto
proyecto=''
## Archivo de configuración del proyecto
CONFIGURACION_FTPTRABAJO_PROYECTO=''
## Carpeta ftptrabajo de proyecto individual, aquí pondremos los ficheros
## de bloqueo del proyecto, lista de archivos bloqueados y lo que se necesite crear.
DIR_FTPTRABAJO_PROYECTO=''

declare -a archivos   ##< Array de archivos
declare -i na=0       ##< Nuemro de archivos

## Ultimo error
ultimoError=${DIR_TMP}ftptrabajo.ultimoError

## Comando ftp
COMANDO_FTP="ftp -p -i -v "
LOCALES="LANG=en_GB.utf8"

SALIDA=""

## Pantalla de información

function info() {

   doxygen2help "$0" 

   if [ -n "${!var_*}" ] ; then
      echo
      echo 'Variables configurables'
      echo 'Variables configurables' | sed s/./-/g
      echo
      for var in ${!var_*} ; do d="desc_$var" ; echo -e "   - ${!d}: ${!var}" ; done
      echo
   fi

   }

## Pantalla de ayuda

function help(){ doxygen2help "$0" "false" "@author" ; }

## ok

function ok() { echo -e "`color colAfirmativo`(ok)`color`" ; }

## ko

function ko() { echo -e "`color colError`[KO]`color`" ; }

###################
## Funciones ftp ##
###################

## Comprobar el estado de la última acción

function comprobarEstado() {

   local mensaje

   if [ ! -e "$LOG" ] ; then
      mensaje="No pude acceder al registro de ftp [$LOG]"

   elif egrep "^421 " $LOG | grep  -v "^421 bytes "  > /dev/null 2>&1 ; then
      mensaje="Servidor no accesible$"

   elif grep "Unknown host" $LOG > /dev/null 2>&1 ; then
      mensaje="Servidor no encontrado$"

   elif grep "Not connected" $LOG > /dev/null 2>&1 ; then
      mensaje="Sin conexión en red"

   elif grep "^530 " $LOG | grep  -v "^530 bytes "> /dev/null 2>&1 ; then
      mensaje="Fallo de autentificación"

   elif grep "^550 " $LOG | grep  -v "^550 bytes " > /dev/null 2>&1 ; then
      mensaje="No existe archivo"

   elif grep "^553 " $LOG | grep  -v "^553 bytes "  > /dev/null 2>&1 ; then
      mensaje="No existe archivo o directorio, Quiza falte crear directorio en el servidor"

   elif grep "No such file or directory" $LOG > /dev/null 2>&1 ; then
      mensaje="No se encontró archivo o directorio"

   elif grep "usage: size" $LOG > /dev/null 2>&1 ; then
      mensaje="No se encontró archivo o directorio"

   elif grep "usage: modtime" $LOG > /dev/null 2>&1 ; then
      mensaje="No se encontró archivo o directorio"

   elif grep ": unknown mode" $LOG > /dev/null 2>&1 ; then
      mensaje="No se encontró archivo o directorio"

   elif grep "Operation not permitted" $LOG > /dev/null 2>&1 ; then
      mensaje="Operación no permitida"
 
   elif grep "^202 " $LOG | grep  -v "^202 bytes "  > /dev/null 2>&1 ; then
      mensaje="`grep "^202 " $LOG | grep  -v "^202 bytes "`"

   elif grep "^426 " $LOG | grep  -v "^426 bytes "  > /dev/null 2>&1 ; then
      mensaje="`grep "^426 " $LOG | grep  -v "^426 bytes "`"

   elif grep "^202 " $LOG | grep  -v "^202 bytes "  > /dev/null 2>&1 ; then
      mensaje="`grep "^202 " $LOG | grep  -v "^202 bytes "`"

   elif grep "^999 " $LOG | grep  -v "^999 bytes "  > /dev/null 2>&1 ; then
      mensaje="`grep "^999 " $LOG | grep  -v "^999 bytes "`"

   elif grep "^666 " $LOG | grep  -v "^666 bytes "  > /dev/null 2>&1 ; then
      mensaje="`grep "^666 " $LOG | grep  -v "^666 bytes "`"

   elif grep "^505 " $LOG | grep  -v "^505 bytes "  > /dev/null 2>&1 ; then
      mensaje="`grep "^505 " $LOG | grep  -v "^505 bytes "`"

   elif grep "^503 " $LOG | grep  -v "^503 bytes "  > /dev/null 2>&1 ; then
      mensaje="`grep "^503 " $LOG | grep  -v "^503 bytes "`"

   elif grep "^501 " $LOG | grep  -v "^501 bytes "  > /dev/null 2>&1 ; then
      mensaje="`grep "^501 " $LOG | grep  -v "^501 bytes "`"

   elif grep "^500 " $LOG | grep  -v "^500 bytes "  > /dev/null 2>&1 ; then
      mensaje="`grep "^500 " $LOG | grep  -v "^500 bytes "`"

   elif grep "^450 " $LOG | grep  -v "^450 bytes "  > /dev/null 2>&1 ; then
      mensaje="`grep "^450 " $LOG | grep  -v "^450 bytes "`"

   elif grep "^not found " $LOG  > /dev/null 2>&1 ; then
      mensaje="`grep "^not found " $LOG`"

   fi

   if [ "$mensaje" != "" ] ; then
      ko 
      color ko
      echo "  $mensaje"
      mensaje=
      color
      return 1
   else
      ok
      return 0
   fi

}

## Buscar códigos de error en la salida de ftp

function verError(){

   echo
   echo Registro ftp:
   color aviso
   cat $LOG
   color

}

## Buscamos fecha de archivo
## @return 06/15/2010 11:49:06 GMT

function ftp_fecha_archivo() {
$COMANDO_FTP $ftptrabajo_server > $LOG 2>&1<<FIN
lcd $ftptrabajo_dir_local
cd $ftptrabajo_dir_remoto
modtime "$1"
quit
FIN
grep "$1" $LOG | cut -f2
}

## Buscamos el tamaño del archivo solo para
## comprobar si existe

function ftp_size_archivo() {
$COMANDO_FTP $ftptrabajo_server > $LOG 2>&1<<FIN
lcd $ftptrabajo_dir_local
cd $ftptrabajo_dir_remoto
size "$1"
quit
FIN
grep "^213" $LOG | cut -d' ' -f2
}

## comprobar si existe en servidor

function ftp_existe_en_servidor() {
echo "  Comprobar existencia de archivo o directorio [$1]..." > $LOG
lftp  $ftptrabajo_server >> $LOG 2>&1<<FIN
lcd $ftptrabajo_dir_local
cd $ftptrabajo_dir_remoto
cls "$1"
quit
FIN
comprobarEstado
}

## Bajamos archivo del servidor

function ftp_bajar_archivo(){
$COMANDO_FTP $ftptrabajo_server > $LOG 2>&1<<FIN
lcd $ftptrabajo_dir_local
cd $ftptrabajo_dir_remoto
get "$1" "$1"
quit
FIN
comprobarEstado
}

## Subimos archivo del servidor

function ftp_subir_archivo(){
echo "Comando: $COMANDO_FTP $ftptrabajo_server " > $LOG
$COMANDO_FTP $ftptrabajo_server >> $LOG 2>&1<<FIN
hash
tick
lcd $ftptrabajo_dir_local
cd $ftptrabajo_dir_remoto
mput "$1" "$1"
quit
FIN
comprobarEstado
}

## crear directorio en el servidor

function ftp_crear_dir(){
$COMANDO_FTP $ftptrabajo_server > $LOG 2>&1<<FIN
lcd $ftptrabajo_dir_local
cd $ftptrabajo_dir_remoto
mkdir "$1"
quit
FIN
comprobarEstado
}

## cambiar nombre de archivo en el servidor

function ftp_renombrar(){
$COMANDO_FTP $ftptrabajo_server > $LOG 2>&1<<FIN
lcd $ftptrabajo_dir_local
cd $ftptrabajo_dir_remoto
rename "${1}" "$2"
quit
FIN
comprobarEstado
}

## Eliminamos archivo del servidor

function ftp_eliminar_archivo(){
$COMANDO_FTP $ftptrabajo_server > $LOG 2>&1<<FIN
lcd $ftptrabajo_dir_local
cd $ftptrabajo_dir_remoto
delete "${1}"
quit
FIN
comprobarEstado
}

## Eliminamos archivo del servidor

function ftp_borrar_directorio(){
$COMANDO_FTP $ftptrabajo_server > $LOG 2>&1<<FIN
lcd $ftptrabajo_dir_local
cd $ftptrabajo_dir_remoto
rmdir "${1}"
quit
FIN
comprobarEstado
}

## Listar directorio del servidor

function ftp_listar(){
if [ "${archivos[*]}" == "" ] ; then
   archivos[0]="$ftptrabajo_dir_remoto"
fi
for n in `seq 0 $((${#archivos[*]}-1))` ; do
dir_remoto=${archivos[$n]}
echo
echo "listado de $dir_remoto"
if [ -e "$LS_REMOTO" ] ; then rm $LS_REMOTO ; fi
$COMANDO_FTP $ftptrabajo_server > $LOG 2>&1<<FIN
cd $dir_remoto
mls . $LS_REMOTO
quit
FIN
cat $LS_REMOTO
done
}

## Bajamos todos los archivos del servidor a local que sean más actuales
##
## Se tiene en cuenta la lista de directorios descartados, para no ser bajados
## 
## Parámetros:
##
## - servidor   Se sincroniza en dirección opuesta de local a servidor
## - borrar     Se borran los archivos no encontrados en servidor que están en local
## - dir        Directorio a sincronizar sino existe todo

function ftp_sincronizar() {

if [ "$1" == "servidor" ] ; then
   local servidor=1
   shift
else
   local servidor=0
fi

if [ "$1" = "borrar" ] ; then
   local borrar="-e "
   shift
else
   local borrar=""
fi

if [ "$1" != "" ] ; then
   local dir_local="${ftptrabajo_dir_local}/$1"
   local dir_remoto="${ftptrabajo_dir_remoto}/$1"
else
   local dir_local="${ftptrabajo_dir_local}"
   local dir_remoto="${ftptrabajo_dir_remoto}"
fi

## Bajamos directorios recursivamente
## sobre una lista generada
#cat $LS_REMOTO >> $LOG
#for dir in `cat $LS_REMOTO` ; do
local descartados=

# si subimos no miramos descartados
#if [ $servidor == 0 ] ; then 
   echo '  Archivos o directorios descartados'
   for d in `cat "$LISTA_DIR_DESCARTADOS"` ; do
      descartados="$descartados -x $d"
      echo "  - $d"
   done

   if [ -z "$descartados" ] ; then
      echo '  No hay descartados'
   fi
#fi
echo
echo Dir local:  $dir_local
echo Dir Remoto: $dir_remoto
echo

if [ $servidor == 1 ] ; then
   # local comando="mirror -R --verbose=3 $borrar $descartados --ignore-time --ignore-size ./"
   local comando="mirror -R --verbose=3 $borrar $descartados ./"
else
   local comando="mirror -n --verbose=3 $borrar $descartados ./"
fi

if [ $servidor == 1 ] ; then
   echo "  Actualizando servidor [$dir_local]"
else
   echo "  Actualizando local [$dir_local]"
fi

[[ $DEV ]] && echo comando: $comando

## Sincronizar local con l servidor
#ftp no baja el directorio completo
#ftp -p -i -v $ftptrabajo_server > $LOG 2>&1<<FIN
#yafc -w 120 -v $ftptrabajo_server > $LOG 2>&1<<FIN
#lftp $ftptrabajo_server  > $LOG 2>&1<<FIN
lftp $ftptrabajo_server  <<FIN | tee -a "$REG"
lcd $dir_local
cd $dir_remoto
$comando
quit
FIN

if [ "$?" != "0" ] ; then
   color ko
   echo ERROR: No se pudo bajar $dir
   color
else
   echo "  Actualizado `ok`"
fi

#done

return 0

}

## Bloqueamos archivo del servidor

function ftp_bloquear_archivo(){
# Comprobar que tenemos archivo de bloqueo
if [ ! -e "$BLOQUEO" ] ; then
   echo "No tenemos archivo de bloqueo" | tee $LOG
   return
fi
$COMANDO_FTP $ftptrabajo_server > $LOG 2>&1<<FIN
lcd $ftptrabajo_dir_local
cd $ftptrabajo_dir_remoto
put $BLOQUEO "${1}.LCK"
quit
FIN
comprobarEstado
}

## Eliminamos archivo de bloque del servidor

function ftp_desbloquear(){
[[ "$ftptrabajo_bloqueo_activado" == "no" ]] && return 0
ftp_eliminar_archivo "${1}.LCK" > /dev/null
comprobarEstado
}

## leer archivo de configuración de proyecto
## e inicializar variables

function leer_proyecto() {

   if [ -e "$CONFIGURACION_FTPTRABAJO_PROYECTO" ] ; then

      LOG="${DIR_TMP}ftptrabajo-${proyecto}.log"
      BLOQUEO="${DIR_FTPTRABAJO_PROYECTO}bloqueo.LCK"
      REG="${DIR_FTPTRABAJO_PROYECTO}registro.log"
      USUARIO="Eduardo" # Nombre coincidente del autor de los bloqueos
      LISTA_BLOQUEOS="${DIR_FTPTRABAJO_PROYECTO}listaBloqueados"
      LISTA_DIR_DESCARTADOS="${DIR_FTPTRABAJO_PROYECTO}dirDescartados"
      LS_REMOTO="${DIR_FTPTRABAJO_PROYECTO}lsRemoto"

      if [ $DEV ] ; then

         echo
         echo "DIR_FTPTRABAJO_PROYECTO.....$DIR_FTPTRABAJO_PROYECTO"             
         echo "BLOQUEO.....................$BLOQUEO               "
         echo "REG.........................$REG                   "
         echo "USUARIO.....................$USUARIO               "
         echo "LISTA_BLOQUEOS..............$LISTA_BLOQUEOS        "
         echo "LISTA_DIR_DESCARTADOS.......$LISTA_DIR_DESCARTADOS "
         echo "LS_REMOTO...................$LS_REMOTO             "
         echo "LOG.........................$LOG                   "      
         echo "CONTENIDO BLOQUEO...........`cat $BLOQUEO`"
         echo

      fi

      # Comprobaciones
      if [ ! -e "$BLOQUEO" ] ; then 
         echo 'Sin archivo de bloqueo'
         echo
         echo 'Creamos archivo de bloqueo'
         echo
         read -p 'Su nombre: ' NOMBRE
         read -p 'Su  email: ' EMAIL
         echo "$NOMBRE ($proyecto)||$EMAIL" > "$BLOQUEO"
      fi

   else

      echo
      echo Sin archivo de configuración salimos
      exit 1

   fi

}

## Configurar proyecto

function configurar_proyecto() {

   echo
   echo ftptrabajo
   echo ----------
   echo
   echo "Configuración para $proyecto"
   echo

   echo
   echo Proyecto: $proyecto
   echo
   [[ $DEV ]] && echo -e "\n$CONFIGURACION_FTPTRABAJO_PROYECTO \n\n"

   # Crear carpetas para contener el nuevo proyecto
   if [ ! -d "${DIR_FTPTRABAJO_PROYECTO}" ] ; then
      mkdir "${DIR_FTPTRABAJO_PROYECTO}"
      if [ $? != 0 ] ; then
         echo
         echo "No se pudo crear carpeta de proyecto [$DIR_FTPTRABAJO_PROYECTO]"
         echo
         echo salimos
         exit 4
      fi
   fi
   echo "mt_ftp_directorio: $mt_ftp_directorio / mt_ftp: $mt_ftp"
   # configurar
   configuracion_menu  'ftptrabajo' "${CONFIGURACION_FTPTRABAJO_PROYECTO}" "`dirname "$BASH_SOURCE"`/config.default"
   leer_proyecto
   # crear archivo de bloqueo
   [[ ! -e "$BLOQUEO" ]] && echo "$USER ($proyecto)||$USER@$proyecto.com" > $BLOQUEO

}


#########################
## Funciones generales ##
#########################

## Miramos si el archivo con el que queremos trabajar
## esta bloqueado, si es así nos dice por quien y si no lo baja
## y coloca nuestro bloqueo personal

function trabajarArchivo(){

   echo
   echo "Ficheros a bajar: "
   for n in `seq 0 $((${#archivos[*]}-1))` ; do
      echo "$n) ${archivos[$n]}"
   done
   echo
   echo -e "Confirmar (s/n):  \c "
   read OPCION
   if [ "$OPCION" != "s" ] && [ "$OPCION" != "S" ] ; then
    exit
   fi
   for n in `seq 0 $((${#archivos[*]}-1))` ; do
      x=${archivos[$n]}
      shift 1

      echo -e "\n\nBajando $x" | tee -a $REG

      # Comprobar que no esta en la lista local de bloqueados
      comprobarBloqueoLocal "$x"
      if [ $? = 0 ] ; then
         color destacado
         echo "  Bloqueado Localmente, no se baja"
         color
      else

         comprobarBloqueoServidor "$x"
         if [ $? != 0 ] ; then return 1 ; fi

         # Cambiar nombre local a <archivo>.ft para poder estar 
         # a tiempo de recuperar la copia.
         dir=`dirname "$x"`
         nombre=`basename "$x"`
         fich_ft="${dir}/.${nombre}.ft"

         # Generamos copia para poder compararla con la del servidor
         [[ -e "$x" ]] && cp "$x" "$fich_ft"

         darPermisosEscritura "$x"
         [[ "$?" != "0" ]] && return 1

         echo -ne "  Bajando Archivo: ..."
         ftp_bajar_archivo "$x"
         if [ "$?" != "0" ] ; then
            echo
            echo Hubo un error al bajar archivo, si la causa es que el archivo es nuevo y hay que
            echo subirlo antes, podemos hacerlo ahora, sino se cancela subida.
            echo
            read -p 'Subir archivo como nuevo (s/n): ' OPCION
            if [ "$OPCION" = 's' ] ; then
               nuevo "$x"
            else
               rm "$fich_ft"
               return 1
            fi
         fi

         bloquearEnServidor "$x"
         [[ "$?" != "0" ]] && return 1

         darPermisosEscritura "$x"
         [[ "$?" != "0" ]] && return 1

         # comparar archivos
         SALIDA="`diff \"$x\" \"$fich_ft\"`"
         if [ "$SALIDA" != "" ] ; then
            echo 
            echo -e "$SALIDA"
            echo
            echo "Hay diferencias entre el archivo del servidor"
            echo "y el local."
            echo 
            echo ¿Que deseas hacer?
            echo
            echo '1 - Mantener el archivo local y desechar las diferencias'
            echo '2 - Chafar el archivo local con el del servidor, (por defecto)'
            echo "3 - Editar las diferencias con $ftptrabajo_com_diff"
            echo
            echo -e "Opción: \c "
            read OPCION

            if [ "$OPCION" = '1' ] ; then
               mv "$fich_ft" "$x"
            elif [ "$OPCION" = '3' ] ; then
               CMD="$ftptrabajo_com_diff '$x' '$fich_ft'"
               eval "$CMD"
            fi

         fi

         # Movvemos el archivo local a carpeta tmp para evitar perdidas por despiste
         [[ -e "$fich_ft" ]] && mv "$fich_ft" "/tmp/`basename "$x"``date +-%H.%M`"

      fi


   done

}

## Eliminamos bloqueo de la lista

function eliminarBloqueoLista(){

   echo -en '  Eliminar bloqueo de la lista...'
   grep -v "$1" $LISTA_BLOQUEOS  > ${DIR_TMP}ftptrabajo.tmp
   mv ${DIR_TMP}ftptrabajo.tmp $LISTA_BLOQUEOS
   if [ "$?" = "0" ] ; then ok ; return 0 ; else ko ; return 1 ; fi

}

## Añadir archivo de bloqueo en el servidor

function bloquearEnServidor(){

   if [ "$ftptrabajo_bloqueo_activado" == "no" ] ; then
      echo "$1" >> $LISTA_BLOQUEOS
      return 0
   fi

   echo -ne "  Añadiendo bloqueo ..."
   if [ "`ftp_bloquear_archivo \"$1\"`" ] ; then
      color ok ; echo [ok] ; color
      echo "$1" >> $LISTA_BLOQUEOS
      return 0
   else
      color ko ; echo [KO] ; color
      echo "No se pudo bloquear archivo"
      ver_errores
      return 1
   fi

}

## Mostrar registro de errores

function ver_errores(){
   tail "$REG" "$LOG"
}

## Quitamos permisos de escritura al archivo

function quitarPermisosEscritura() {

   if [ "$*" != "" ] ; then
      dir="$*"
   else
      dir="./"
   fi
   echo -n "  Quitamos permisos de escritura en [${dir}]..."
   # Hay que mantener los permisos en los directorios sino nos da problemas
   # chmod -R ugo-w "$dir"
   eval "$( find "$dir" -type f -printf 'permisos_apache --quitar "%p"\n')"
   if [ "$?" = "0" ] ; then
      ok
      return 0
   else
      ko
      return 1
   fi

}

## Damos permisos de escritura al archivo

function darPermisosEscritura() {

   if [ "$*" != "" ] ; then
      dir="$*"
   else
      dir="./"
   fi
   echo -n "  Añadimos permisos de escritura en [${dir}]..."
   # Hay que mantener los permisos en los directorios sino nos da problemas
   #chmod -R ugo+rw "$dir"
   eval "$( find "$dir" -type f -printf 'permisos_apache "%p"\n')" 2>/dev/null
   if [ "$?" = "0" ] ; then
      ok
      return 0
   else
      ko
      echo "  No se pudo cambiar permisos"
      return 1
   fi

}

## Devolvemos archivo al servidor y quitamos el bloqueo
## Primero comprobamos que el bloque sea el nuestro

function devolverArchivo(){

   echo
   echo "Ficheros a subir ${#archivos[*]}: "
   echo
   for n in `seq 0 $((${#archivos[*]}-1))` ; do
      echo "$n) ${archivos[$n]}"
   done
   echo
   read -p "Confirmar (s/n): " OPCION
   if [ "$OPCION" != "s" ] && [ "$OPCION" != "S" ] ; then
    exit
   fi
   for n in `seq 0 $((${#archivos[*]}-1))` ; do
      x=${archivos[$n]}
      echo -e "\n\nDevolver archivo $x"
      echo -en '  Comprobar que esta bloqueado localmente...'
      
      comprobarBloqueoLocal "$x"
      if [ $? = 1 ] ; then
         ko
         color ko ; echo "  No esta bloqueado localmente" ; color
      else
         ok
         comprobarBloqueoServidor "$x"
         if [ "$?" != "0" ] ; then
            return 1
         fi

         echo -en "  Subiendo archivo ...\b"
         ftp_subir_archivo "$x"
         if [ $? != 0 ] ; then
            return 1
         fi

         # quitar bloqueo del servidor si lo hay
         echo -en "  Eliminando bloqueo del servidor ..."				
         ftp_desbloquear "$x"
         if [ $? = 0 ] ; then
            #echo "Bloqueo eliminado del servidor"
            # borramos el local si lo hay
            if [ -e "${ftptrabajo_dir_local}/${x}.LCK" ] ; then
               rm "${ftptrabajo_dir_local}/${x}.LCK"
            fi
            eliminarBloqueoLista "$x"
            quitarPermisosEscritura "$x"
         else
            color ko
            echo "  No se pudo eliminar bloqueo en el servidor"
            color
         fi
      fi

   done
}

## Comprobamos que el archivo no esta bloqueado en el servidor
## por otra persona.
## Si no utilizamos sistema de bloqueos devolvemos 0

function comprobarBloqueoServidor(){

   [[ "$ftptrabajo_bloqueo_activado" == "no" ]] && return 0

   echo -ne "  Comprobando bloqueo en servidor..."
   ftp_bajar_archivo "$*".LCK > /dev/null
   if [ $? = 0  ] ; then
      # archivo bloqueado
      # Bajamos archivo para ver si el bloqueo es nuestro
      if [ ! "`egrep -i \"$USUARIO\" \"${ftptrabajo_dir_local}/${*}.LCK\"`" ] ; then
         # El bloqueo no es nuestro lo mostramos y salimos
         ko
         color aviso
         echo -e "  No se puede subir archivo bloqueado por:"
         color destacado
         echo -n '  ' ; cat "${ftptrabajo_dir_local}/$*".LCK
         color
         echo
         read -p 'Deseas enviarle un email solicitando que lo libere. (s/n): ' OPCION
         if [ "$OPCION" = "s" ] ; then
            local mail_bloqueado=`cat "${ftptrabajo_dir_local}/$*".LCK | cut -d\| -f3`
            local subject="Archivo $* bloqueado"
            local body="Necesitaría el archivo $* para trabajar.\n\nGracias"
            echo
            echo Mail: $mail_bloqueado
            echo Subject: $subject
            echo Body: 
            echo
            echo ---
            echo -e "$body"
            echo ---
            echo 
            read -p "Enviar email. (s/n): " OPCION
            if [ "$OPCION" = "s" ] ; then
               echo -e "$body" | mail -a "Content-Type: text/plain; charset=UTF-8" -s "$subject" $mail_bloqueado
            fi
         fi
         # Borramos archivo de bloqueo
         rm  "${ftptrabajo_dir_local}/$*".LCK
         return 1
      else
         ok
         BLOQUEO_PROPIO="SI"				
         # Borramos archivo de bloqueo
         rm  "${ftptrabajo_dir_local}/$*".LCK
         return 0
      fi

   else

      ok

   fi
}

## Comprobamos que el archivo esta bloqueado localmente
## Sino utilizamos sistema de bloqueo devolvemos 1

function comprobarBloqueoLocal(){
   
   salida="$(cat $LISTA_BLOQUEOS | grep ^${1}$)"
   if [ "$salida" = "" ] ; then
      return 1
   else
      return 0
   fi
}

## Crear directorio en servidor

function crear_directorio_servidor() {

   local subdirectorio=`dirname "$1"`

   while [ "$subdirectorio" ] ; do

      [[ $DEV ]] && echo "  Comprobar subdirectorio [$subdirectorio]"
      
      if [ "$subdirectorio" = "." ] ; then

         echo -n "  Creando directorio [$1]..."
         ftp_crear_dir "$1"
         subdirectorio=
         
      else

         ftp_existe_en_servidor "$subdirectorio" > /dev/null

         if [ $? = 0 ] ; then
            echo -n "  Creando directorio [$1]..."
            ftp_crear_dir "$1"
            subdirectorio=
         else
            crear_directorio_servidor "$subdirectorio"
         fi

      fi

   done

}

## Creamos un nuevo archivo o directorio en el servidor.
##
## Comprobamos que no exista uno ya.
## El archivo o directorio debe existir en local.
##
## @param $* archivos a crear

function nuevo() {

   if [ -z "$1" ] ; then
      for n in `seq 0 $((${#archivos[*]}-1))` ; do
         nuevo "${archivos[$n]}"
      done
      return
   else
      echo "Subiendo contenido nuevo: [$1]"
   fi

   while [ -n "$1" ] ; do
      elemento=$1
      shift 1

      echo "  [$elemento]"

      if [ -d "$elemento" ] ; then

         echo "$FUNCNAME Subiendo directorio [$elemento]" >> "$LOG"

         for dir in "$elemento/"* ; do
            nuevo "$dir"
         done

      elif [ -e "$elemento" ] ; then

         # es un archivo

         echo -n "  Comprobar existencia en servidor..."
         ftp_existe_en_servidor "$elemento" > /dev/null
         if [ $? = 0 ] ; then
            ko
            color aviso
            echo "  El archivo ya existe en servidor, no se sube"
            color
            continue
         else
            ok
         fi

         # Existe subdirectorio?

         local subdirectorio=`dirname "$elemento"`
         echo -n "  Comprobar subdirectorio en servidor [$subdirectorio]..."
         ftp_existe_en_servidor "$subdirectorio" >> $LOG 
         if [ $? != 0 ] ; then
            ko
            echo "  Creando subdirectorio [$subdirectorio]"
            crear_directorio_servidor "$subdirectorio"
            comprobarEstado > /dev/null
            if [ $? != 0 ] ; then
               color ko
               echo "  No se pudo crear subdirectorio [$subdirectorio]"
               color
               continue
            fi

         else
            ok
         fi

         echo -n "  Subiendo [$elemento]..."
         ftp_subir_archivo "$elemento"

      else

         # No existe

         ko
         color aviso
         echo '  Es necesario que el archivo o directorio exista en local'
         color

      fi

   done

}

## Borrar un directorio con todo su contenido

function borrarDirectorioRecursivamente(){

   # lista con ficheros a borrar
   local lista_para_borrar=()

   # lista con directorios a borrar
   local lista_dir_para_borrar=()

   generarListaBorrado(){

      ## Bajar listado del contenido del directorio

      echo "Comprobando $1"
      # comprobamos salida de programa
      if [ "`ftp_listar \"$1\"`" = "ok" ] ; then

         # Es un directorio
         lista_dir_para_borrar[${#lista_dir_para_borrar[*]}]="$1"
         for f in `cat $LS_REMOTO | egrep -v '^\.$|^\.\.$'` ; do
            generarListaBorrado ${1}/${f}
         done

      elif egrep "^550" $LOG > /dev/null 2>&1 ; then

         # No es un directorio
         lista_para_borrar[${#lista_para_borrar[*]}]="$1"

      else
         echo "Comprobación de fichero o directorioo directorio negativa"
      fi


   }

   while [ -n "$1" ] ; do
      generarListaBorrado "$1"
      shift 1
   done

   # si no existe archivo es que no es un directorio valido
   if [ ${#lista_dir_para_borrar[*]} = 0 ] ; then
      echo "No existe directorio en servidor"
   else

      echo
      echo "Ficheros a borrar"
      for f in ${lista_para_borrar[*]} ; do echo "- $f" ; done
      echo
      echo "Directorios a borrar"
      for d in ${lista_dir_para_borrar[*]} ; do echo "d $d" ; done

      #echo
      echo -en "Borramos contenido (s/n): "
      read OPCION
      if [ "$OPCION" != "s" ] ; then
         echo
         echo "Borrar $1 - Cancelado"
      else
         echo

         # Borramos los ficheros 
         for f in ${lista_para_borrar[*]} ; do
            echo "Borrando $f"
            ftp_eliminar_archivo "$f"
         done

         # Borramos los directorios en orden inverso
         for num in `seq ${#lista_dir_para_borrar[*]} -1 0` ; do
            echo -en "Borrando ${lista_dir_para_borrar[$num]}..."
            if [ "`ftp_borrar_directorio \"${lista_dir_para_borrar[$num]}\"`" = "ok" ] ; then
               echo "[ok]"
            else
               echo -e "[${c_error}KO${fc}]"
            fi

         done

      fi

   fi
   return

   ## Presentar listado y confirmar borrado
}

## Borrar archivos del servidor

function borrarArchivosServidor() {

   echo "Borrar ficharos del servidor"
   echo
   for n in `seq 0 $((${#archivos[*]}-1))` ; do
      x=${archivos[$n]}
      echo -e "$x"
      sleep 1s

      if [ "$OPCION" != "t" ] ; then
         read -p "  Confirmar ([s]i/[n]o/[t]odos): " OPCION
      fi

      [[ "$OPCION" = "n" ]] && exit

      echo -ne "  Comprobando bloqueo ..."
      if [  "`ftp_bajar_archivo "$x".LCK`" = "ok" ] ; then
         # archivo bloqueado
         # Bajamos archivo para ver si el bloqueo es nuestro
         echo "ko"
         echo -en "  Identificación de bloqueo ..."
         if [ ! "`egrep -i \"$USUARIO\" ${ftptrabajo_dir_local}/${x}.LCK`" ] ; then
            # El bloqueo no es nuestro lo mostramos y salimos
            echo "ko"
            echo -e "${c_error}  No se puede eliminar archivo bloqueado por: $fc"
            cat "${ftptrabajo_dir_local}/$x".LCK
            exit
         else
            echo "[ok]"
            BLOQUEO_PROPIO="SI"
         fi
      else
         echo "[ok]"
      fi

      echo -en "  Eliminando archivo ...\b"

      ftp_eliminar_archivo "$x"

      if [ "$?"  = "0" ] ; then
         # quitar bloqueo del servidor si lo hay
         if [ "$BLOQUEO_PROPIO" = "SI" ] ; then
            echo -en "  Eliminando bloqueo del servidor ..."				
            if [ `ftp_desbloquear $x` = "ok" ] ; then
               echo "[ok]"
               #echo "Bloqueo eliminado del servidor"
               # borramos el local si lo hay

               if [ -e "${ftptrabajo_dir_local}/${x}.LCK" ] ; then
                  rm "${ftptrabajo_dir_local}/${x}.LCK"
               fi
               # Eliminamos archivo de la lista
               grep -v "$x" $LISTA_BLOQUEOS  > ${DIR_TMP}ftpTotbisbal_lista.tmp
               mv ${DIR_TMP}ftpTotbisbal_lista.tmp $LISTA_BLOQUEOS
               echo " Quitamos archivo de la lista de bloqueados"
            else
               echo "ko"
               echo -e "${c_error}  No se pudo eliminar bloqueo$fc"
               echo "  Mantenemos bloqueo"
            fi
         fi
      else
         echo
         echo " No se pudo eliminar archivo"
         echo
         read -p ' Continuar (s/n): ' OPCION
         [[ "$OPCION" != "s" ]] && exit
      fi
   done
}

## Subimos todos los archivos que tenemos en la lista de
## archivos bajados y bloqueados por nosotros

function subirLista(){

   if [ "`cat $LISTA_BLOQUEOS`" = "" ] ; then
      echo
      color aviso ; echo '  No tenemos archivos bloqueados' ; color
      echo
      return
   fi

   archivos=()
   local -i n=0
   exec 3<"$LISTA_BLOQUEOS"
   while read -u 3 ar; do
      archivos[$n]="$ar"
      let n++
   done
   devolverArchivo

}

## Añadimos archivos a la lista de bloqueados, esto nos permite que al crear
## un archivo nuevo en el proyecto, se suba con el resto de archivos bloqueados

function anyadirLista(){

   for x in $* ; do

      echo -ne "  Añadir a lista ${x}..."
      # comprobar que no este ya en la lista
      if [ "`grep $x $LISTA_BLOQUEOS`" != "" ] ; then
         echo -e "  ${c_error}Ya esta en la lista$fc"
      else
         echo "$x" >> $LISTA_BLOQUEOS
      fi

   done
								
}

## Obtiene un archivo del servidor

function obtener(){

for n in `seq 0 $((${#archivos[*]}-1))` ; do
   x=${archivos[$n]}
   echo -en "[$x] - bajando archivo ...\b"
   ftp_bajar_archivo "$x"
   if [ $? = 0 ] ; then
      echo -en "  Permisos de lectura...\b"
      quitarPermisosEscritura "$x"
   fi
done

}

## Generamos lista de ordenes para ftp con los archivos y directorios a bajar
##
## Uso: generar_lista_dir_bajar [opciones] [directorio]
## 
## opciones:
##
## --bloqueos Solo bajamos los archivos de bloqueo

function generar_lista_dir_bajar(){

   if [ "$1" == '--bloqueados' ] ; then
      local dir="$2"
   else
      local dir="$1"
   fi
   ftp_listar "$dir"
   echo -n "  Generando lista de directorios..."
   if [ "$1" = "bloqueos" ] ; then
      for x in $(cat $LS_REMOTO | grep -v -f $LISTA_DIR_DESCARTADOS ) ; do
         if [ "$x" != '.' ] && [ "$x" != '..' ] ; then
            echo "get -nr -m *.LCK $x" >> ${DIR_TMP}ls_remoto
         fi
      done
   else
      for x in $(cat $LS_REMOTO | grep -v -f $LISTA_DIR_DESCARTADOS ) ; do
         if [ "$x" != '.' ] && [ "$x" != '..' ] ; then
            echo "- $x"
            echo "$x" >> ${DIR_TMP}ls_remoto
         fi
      done
   fi
   mv ${DIR_TMP}ls_remoto $LS_REMOTO
   cat "$LS_REMOTO" >> "$REG"
   ok

   }

## Bajamos los archivos de bloqueo que se encuentran en el
## servidor, esto nos permite saber en archivos se esta trabajando
## actualmente y quien.

function bajarBloqueos(){
echo "Bajar bloqueos: "
cat $LS_REMOTO
lftp $ftptrabajo_server > $LOG 2>&1<<FIN
glob
lcd $ftptrabajo_dir_local
cd $ftptrabajo_dir_remoto
mget *.LCK
quit
FIN
}

## Borramos los ficheros de bloqueos del local para que al bajar los del servidor
## estén todos actualizados.

function borrarBloqueos() {
   echo -n "  Borramos los bloqueos locales..."
   find . -name "*.LCK" -delete
   if [ "$?" != "0" ] ; then
      echo "[ko]"
      return 1
   else
      echo "[ok]"
      return 0
   fi

}

# Ver la lista local de archivos bloqueados

function verBloqueos(){
   echo
   echo Archivos bloqueados encontrados en local
   echo
   for x in `find . -name "*.LCK" -print` ; do echo $x | sed -e 's/\.LCK//g' ; cat $x ; done
}

## Cambiar nombre de archivo en el servidor

function cambiarNombre() {

   archivo="$1"
   nuevo="$2"
   echo
   echo "Origen: $archivo"
   echo "Destino: $nuevo"
   echo
   # si hay más argumentos interpretamos que hay algun error
   if [ "$3" != "" ] ; then
      echo "ERROR::Hay más argumentos de los necesarios"
      exit
   fi

   echo -en '  Comprobar que esta bloqueado localmente...'
   if [ "`comprobarBloqueoLocal \"$archivo\"`" = 'ko' ] ; then
      echo '[KO]'
      echo -e "${c_error}  El archivo debe estar bloqueado para trabajar con él $fc"
      exit
   else
      echo '[ok]'
   fi

   comprobarBloqueoServidor "$archivo"
   if [ "$?" != "0" ] ; then echo "[ko]" ; return 1 ; fi

   echo -en '  Comprobar que no chafamos archivo...'
   if [ `ftp_size_archivo $nuevo` = 'ok' ] ; then
      echo '[ko]'
      echo '  Hay archivo con el mismo nombre'
      echo -e "  ${c_aviso}$nuevo $fc"
      read -p '  Continuamos (s/n): ' opcion
      if [ "$opcion" != "s" ] ; then
         echo 'Cancelado'
         return 1
      fi
   else
      echo '[ok]'
   fi

   echo -en '  Cambiar nombre de bloqueo en servidor...'
   if [ `ftp_renombrar "${archivo}.LCK" "${nuevo}.LCK"` ] ; then
      echo '[ok]'
   else
      echo '[ko]'
      return 1
   fi

   echo -en '  Cambiar nombre de bloqueo en local...'
   if [ -e "${archivo}.LCK" ] ; then
      mv "${archivo}.LCK" "${nuevo}.LCK"
      echo '[ok]'
   else
      echo '[ko]'
   fi

   echo -en '  Cambiar nombre en servidor...'
   if [ "`ftp_renombrar "$archivo" "$nuevo"`" = "ok" ] ; then
      echo '[ok]'
   else
      echo -e "${c_error}[ko]$fc"
      ver_errores
      return 1
   fi

   eliminarBloqueoLista "$archivo"
   echo "$nuevo" >> $LISTA_BLOQUEOS

}

## Sincronizar servidor con local

function sincronizar_servidor() {

   sincronizar "servidor"

   }

## Sincronizar local con servidor o al reves

function sincronizar() {

   if [ "$1" == "servidor" ] ; then
      local servidor="servidor"
   else
      local servidor=""
   fi

   [[ -e "$REG" ]] && rm "$REG"
   [[ -e "$LOG" ]] && rm "$LOG"

   [[ -n "${archivos[*]}" ]] && dir_sync="${archivos[*]}"
   [[ -n "$dir_sync" ]] || dir_sync="./"

   if [ "$servidor" == "" ] ; then
      echo Sincronizando local con servidor [$dir_sync]
   else
      echo Sincronizando servidor con local [$dir_sync]
   fi

   local pregunta="  Borramos los archivos o directorios no existentes (s/n): "
   read -n 1 -s -p "$pregunta" OPCION
   echo
   if [ "$OPCION" == "s" ] ;then
      local borrar="borrar"
   else
      local borrar=""
   fi

   # Comprobar antes que no hay ningún fichero bloqueado

   SALIDA=$(cat $LISTA_BLOQUEOS)
   if [ "$SALIDA" != "" ] ; then

      echo
      echo Archivos bloqueados
      echo -------------------
      echo
      cat $LISTA_BLOQUEOS
      echo
      color comentario
      echo -n "Hay archivos bloqueados"
      color
      echo
      read -p "Forzar la sincronización (s/n): " OPCION
      [[ "$OPCION" != "s" ]] && return

   fi

   echo -en " Directorio local $ftptrabajo_dir_local ..."
   cd $ftptrabajo_dir_local
   [[ $? == 0 ]] && ok || ko 

   if [ "$?" != 0 ] ; then
      echo
      color ko
      echo No se pudo entrar en directorio local $ftptrabajo_dir_local
      color
      exit
   fi

   echo `date` >> "$REG"
   #$ftptrabajo_terminal -e "tail -f $LOG -f $REG" &

   [[ "$servidor" == "" ]] && darPermisosEscritura "$dir_sync"

   ftp_sincronizar $servidor $borrar "$dir_sync"

   [[ "$servidor" == "" ]] && quitarPermisosEscritura "$dir_sync"

}

## Bajar los archivos de bloqueo que haya en el servidor

function bajar_bloqueos(){

   echo Bajar los archivos de bloqueo del servidor
   [[ -e "$REG" ]] && rm "$REG"
   [[ -e "$LOG" ]] && rm "$LOG"
   echo `date` >> "$REG"
   echo `date` >> "$LOG"
   $ftptrabajo_terminal -e "tail -f $LOG -f $REG" &
   darPermisosEscritura "$ftptrabajo_dir_local"
   borrarBloqueos
   # Bajamos bloqueos
   generar_lista_dir_bajar --bloqueos
   ftp_sincronizar
   quitarPermisosEscritura "$ftptrabajo_dir_local"

}

## subir archivo sin tener en cuenta bloqueo

function forzar_subida_archivo() {

   echo
   echo Subir archivos sin tener en cuenta los bloqueos
   echo

   if [ "${archivos[*]}" == "" ] ; then
      echo "Sin archivos especificados no hago nada"
      return
   fi

   for f in ${archivos[*]} ; do
      echo - $f
   done
   echo
   read -p 'Confirmar (s/n): ' OPCION

   [[ "$OPCION" != "s" ]] && return ;

   for f in ${archivos[*]} ; do
      echo -n "- $f..."
      ftp_subir_archivo "$f"
   done

}

## Forzar la subida de archivos bloqueados quitar bloqueo

function forzar_subida_bloqueados() {

   for f in $(cat $LISTA_BLOQUEOS) ; do
     echo -n "Subiendo ${f}..."
     ftp_subir_archivo "$f"
   done

}

## Presentar lista de archivos bloqueados

function lista_archivos_bloqueados() {

   SALIDA="`cat $LISTA_BLOQUEOS`"
   if [ ! -z "$SALIDA" ] ; then
      echo -e "$SALIDA"
   fi

   }

## Presentar total de archivos bloqueados

function total_archivos_bloqueados() {

   wc -l $LISTA_BLOQUEOS | cut -d' ' -f1
}

## tecla

function tecla(){
   read -n 1 -p 'Presione una tecla para continuar'
   }

## Comprobar proyecto

function comprobar_proyecto() {
   
   [[ $DEV ]] && echo -e "\n\nComprobar proyecto"

   # Si no se pasa un proyecto determinado buscamos si la carpeta actual coincide
   # con una configuración.

   if [ -z $proyecto ] ; then
      proyecto="`basename "$(pwd)"`"
   fi

   [[ $DEV ]] && echo -e "\n\nproyecto: $proyecto"

   CONFIGURACION_FTPTRABAJO_PROYECTO=".magtrabajos/configuracion/ftptrabajo"
   DIR_FTPTRABAJO_PROYECTO=".magtrabajos/ftptrabajo/"

   if [ ! -e "$CONFIGURACION_FTPTRABAJO_PROYECTO" ] ; then
      [[ $DEV ]] && echo -e "\n\nNo existe un proyecto para esta carpeta"
      [[ $consulta ]] && exit 1
      echo
      echo 'ftptrabajo no está configurado'
      echo
      #echo Coloquese en el directorio y ejecute: ftptrabajo --configurar
      #echo
      #exit 1
      configurar_proyecto
   else
      source $CONFIGURACION_FTPTRABAJO_PROYECTO
      leer_proyecto
      [[ $DEV ]] && configuracion_ver  'ftptrabajo' "`dirname "$BASH_SOURCE"`/config.default"
   fi

   # Comprobar que tenemos configurado el bloqueo.
   if [ ! -e "$BLOQUEO" ] ; then
      echo
      echo Configurar archivo de bloqueo
      echo
      read -p 'Nombre usuario: ' USUARIO
      read -p 'Nombre proyecto: ' PROYECTO
      read -p 'Email: ' EMAIL
      echo "$USUARIO ($PROYECTO)||$EMAIL" > $BLOQUEO
   fi

   # Comprobar directorios y archivos imprescindibles
   if [ ! -e "$LISTA_BLOQUEOS" ] ; then
      touch "$LISTA_BLOQUEOS"
   fi

   if [ $DEV ] ; then
      echo
      echo REG: $REG
      echo LOG: $LOG
      echo BLOQUEO: $BLOQUEO
      echo USUARIO: $USUARIO
      echo ftptrabajo_dir_local: $ftptrabajo_dir_local
      echo ftptrabajo_dir_remoto: $ftptrabajo_dir_remoto
      echo LISTA_BLOQUEOS: $LISTA_BLOQUEOS
      echo LISTA_DIR_DESCARTADOS: $LISTA_DIR_DESCARTADOS
      echo LS_REMOTO: $LS_REMOTO
      echo CONFIGURACION_FTPTRABAJO_PROYECTO: $CONFIGURACION_FTPTRABAJO_PROYECTO
      echo Contenido bloqueo: `cat "$BLOQUEO"`
      echo 
   fi

}

## Listado de directorios en servidor

function estructuta_servidor() {

   lftp -e "cd $ftptrabajo_dir_remoto ; find ; quit" $ftptrabajo_server | grep /$
}

## Lanzar un comando recibido por el usuario

function lanzar_comando() {

   lftp -e "cd $ftptrabajo_dir_remoto ; $ftpcomando ; quit" $ftptrabajo_server

   }

## Menú

function menu() {

   echo
   echo `basename $0` - $proyecto | sed 's/./=/g'
   echo `basename $0` - $proyecto
   echo `basename $0` - $proyecto | sed 's/./=/g'
   echo
   echo ' [L]istar archivos bloqueados'
   echo ' Subir [t]odos los archivos bloqueados'
   echo ' S[u]bir archivos bloqueados sin perder el bloqueo'
   echo
   echo ' S[i]ncronizar local con el servidor'
   echo
   echo ' Editar arc[h]ivo de bloqueados'
   echo ' Editar lista de directorios [d]escartados al sincronizar'
   echo
   echo ' [V]er registro del programa'
   echo ' Ver registro de la actividad de [f]tp'
   echo ' V[e]r bloqueos en local'
   echo
   echo ' [1] Lanzar cliente lftp'
   echo ' [2] Lanzar cliente mc'
   echo
   echo ' A[y]uda - [S]alir'
   echo

   read -n 1 -s -p ' ' OPCION

   case $OPCION in

      l|L) $0 -p "$proyecto" -vb           ;;
      t|T) $0 -p "$proyecto" -sb           ;;
      u|U) $0 -p "$proyecto" -fsb          ;;
      i|I) $0 -p "$proyecto" --sincronizar ;;
      h|H) $0 -p "$proyecto" -elb          ;;
      v|V) $0 -p "$proyecto" --log         ;;
      f|F) $0 -p "$proyecto" --log-ftp     ;;
      d|D) $0 -p "$proyecto" -edd          ;;
      e|E) $0 -p "$proyecto" -vbl ; tecla  ;;

      1) $0 -p "$proyecto" --lftp ;;
      2) $0 -p "$proyecto" --mc ;;

      y|Y) clear ; help ; tecla            ;;
      s|S) exit 0 ;;

   esac
   return
   }

############
## Inicio ##
############

comprobar_proyecto

while [ -n "$1" ]; do

   case $1 in

      --proyecto|-p) shift 1 ; proyecto=$1 ; shift 1 ;;
      -info) shift 1 ; info ; exit ;;
      -h|-help|--help) shift 1 ; help ; exit ;;
      --configurar) shift 1 ; comprobar_proyecto && configurar_proyecto ; exit ;; 
      -a) shift 1 ; accion=anyadirLista ;;
      --comando|-c) shift 1 ; accion=lanzar_comando ; ftpcomando="$*" ; shift ;;
      --cambiar-nombre) shift 1 ; accion=cambiarNombre ;;
      --subir|-s) shift 1 ; accion=devolverArchivo ;;
      --subir-bloqueados|-sb) accion=subirLista ; shift 1 ;;
      --nuevo) shift 1 ; accion=nuevo ;;
      --borrar-dir) shift 1 ; accion=borrarDirectorioRecursivamente ;;
      --borrar) shift 1 ; accion=borrarArchivosServidor ;;
      --bajar|-b) shift 1 ; accion=trabajarArchivo ;;
      --log-ftp) shift 1  ; comprobar_proyecto ; ($ftptrabajo_terminal -e "tail -f $LOG" &) ; exit ;;
      --log) shift 1 ; comprobar_proyecto ; ($ftptrabajo_terminal -e "tail -f $REG" &) ; exit ;;
      --sincronizar) shift 1 ; accion=sincronizar ;;
      --sincronizar-servidor) shift 1 ; accion=sincronizar_servidor ;;
      -edd) shift 1 ; comprobar_proyecto ; $ftptrabajo_editor "$LISTA_DIR_DESCARTADOS" ; exit ;;
      -elb) shift 1 ; comprobar_proyecto ; $ftptrabajo_editor "$LISTA_BLOQUEOS" ; exit ;;
      --bajar-bloqueos) shift 1 ; accion=bajar_bloqueos ;;
      --ver-bloqueados|-vb) shift 1 ; accion=lista_archivos_bloqueados ;;
      --total-bloqueados|-tb) shift 1 ; accion=total_archivos_bloqueados ;;
      --ver-bloqueos-local|-vbl) shift 1 ; accion=verBloqueos ;;
      --forzar-subir|-fs) shift 1 ; accion=forzar_subida_archivo ;;
      --forzar-subir-bloqueados|-fsb) shift 1 ; accion=forzar_subida_bloqueados ;;
      --forzar-bajar|-fb) shift 1 ; accion=obtener ;;
      --listar) shift 1 ; accion=ftp_listar ;;
      --menu) shift 1 ; accion=menu ;;
      --depurar) shift 1 ; DEV=1 ; echo depurar activado ;;
      --listar-estructura) shift 1 ; accion=estructuta_servidor ;;
      --lftp) shift 1 ; comprobar_proyecto ; da="`pwd`" ; cd "$ftptrabajo_dir_local" ; lftp $ftptrabajo_server ; cd "$da" ; exit ;;
      --mc) shift 1 ; comprobar_proyecto ; mc "$ftptrabajo_dir_local" /#ftp:$ftptrabajo_server ; exit ;;
      --lista-externa) shift 1 ; archivos=(`cat "$1"`) ; shift 1 ;;
      --consulta) shift 1 ; consulta=1 ;;
      *) archivos[$na]="$1" ; shift 1 ; let na++ ;;

   esac
done

# depurar
if [ $DEV ] ; then
   configuracion_lista 'ftptrabajo' "`dirname "$BASH_SOURCE"`/config.default"
   echo
fi


if [ -n "$accion" ] ; then
   echo "`date +"%A %d de %B del %Y"` $accion: $*" >> $REG
   cmd="$accion $@"
   [[ $DEV ]] && echo proyecto: $proyecto
   [[ $DEV ]] && echo CMD: $cmd
   eval "$cmd"
else
   echo
   echo "Parametro no reconocido [$*]"
   echo
   help
fi
